"""Check if a host is in the Google Chrome HSTS Preload list"""

import functools
import os
import typing

__version__ = "2022.7.10"
__checksum__ = "cc7ef5e410bf5b2b067b874a5a824b67323c3e5886e330e956a441cbdfc191ad"
__all__ = ["in_hsts_preload"]

# fmt: off
_GTLD_INCLUDE_SUBDOMAINS = {b'android', b'app', b'bank', b'boo', b'channel', b'chrome', b'dad', b'day', b'dev', b'eat', b'esq', b'fly', b'foo', b'gle', b'gmail', b'google', b'hangout', b'ing', b'insurance', b'meet', b'meme', b'new', b'nexus', b'page', b'phd', b'play', b'prof', b'rsvp', b'search', b'youtube'}  # noqa: E501
_JUMPTABLE = [[(0, 11), (11, 10), (21, 16), (37, 61), (98, 26), (124, 12), None, (136, 19), (155, 22), (177, 7), (184, 20), (204, 18), None, (222, 29), (251, 45), (296, 7), (303, 9), (312, 36), (348, 16), (364, 10), (374, 28), None, (402, 62), (464, 8), (472, 18), (490, 19), (509, 13), (522, 14), (536, 14), None, None, (550, 33), (583, 20), (603, 35), (638, 14), (652, 32), (684, 17), (701, 9), (710, 25), (735, 20), (755, 8), (763, 13), (776, 10), None, (786, 17), (803, 6), (809, 26), (835, 10), (845, 5), (850, 19), (869, 14), (883, 11), (894, 12), (906, 27), None, (933, 24), (957, 11), (968, 7), (975, 29), (1004, 18), (1022, 27), (1049, 46), (1095, 25), (1120, 16), (1136, 18), (1154, 5), (1159, 22), (1181, 18), None, (1199, 36), (1235, 15), (1250, 8), (1258, 11), None, (1269, 5), (1274, 16), (1290, 14), (1304, 18), None, (1322, 20), (1342, 26), (1368, 48), (1416, 19), (1435, 12), (1447, 59), (1506, 14), (1520, 14), (1534, 20), None, (1554, 10), (1564, 13), (1577, 20), (1597, 29), None, (1626, 13), (1639, 19), (1658, 11), (1669, 4), (1673, 22), (1695, 10), (1705, 13), (1718, 14), (1732, 28), (1760, 11), (1771, 21), (1792, 12), (1804, 32), None, (1836, 10), (1846, 14), (1860, 19), (1879, 45), (1924, 15), None, (1939, 11), (1950, 23), (1973, 21), (1994, 26), (2020, 6), (2026, 6), (2032, 7), (2039, 5), (2044, 30), (2074, 23), (2097, 35), (2132, 17), (2149, 15), (2164, 19), (2183, 12), (2195, 70), (2265, 55), (2320, 12), (2332, 23), (2355, 16), (2371, 38), (2409, 6), (2415, 20), (2435, 44), (2479, 6), (2485, 41), (2526, 13), (2539, 23), (2562, 36), (2598, 20), (2618, 8), (2626, 15), (2641, 12), (2653, 19), (2672, 25), (2697, 15), None, (2712, 35), (2747, 21), (2768, 17), (2785, 19), (2804, 26), (2830, 5), (2835, 37), (2872, 39), (2911, 16), (2927, 10), (2937, 17), (2954, 23), (2977, 14), (2991, 17), (3008, 8), (3016, 8), (3024, 7), (3031, 29), (3060, 6), (3066, 18), (3084, 32), (3116, 20), (3136, 17), (3153, 24), (3177, 12), (3189, 40), (3229, 40), (3269, 12), (3281, 48), (3329, 32), (3361, 17), None, (3378, 8), (3386, 25), (3411, 25), (3436, 6), (3442, 23), None, (3465, 36), (3501, 33), (3534, 14), (3548, 16), (3564, 27), None, (3591, 30), (3621, 41), (3662, 50), (3712, 15), (3727, 20), (3747, 25), (3772, 21), (3793, 32), (3825, 24), (3849, 20), (3869, 17), (3886, 60), (3946, 19), (3965, 9), (3974, 12), (3986, 12), (3998, 11), (4009, 10), (4019, 48), (4067, 42), None, (4109, 25), (4134, 28), None, (4162, 8), (4170, 8), (4178, 7), None, (4185, 25), (4210, 17), None, (4227, 21), (4248, 35), (4283, 21), (4304, 10), (4314, 41), (4355, 20), (4375, 31), (4406, 23), (4429, 19), (4448, 12), (4460, 5), (4465, 30), (4495, 29), (4524, 14), (4538, 14), (4552, 47), (4599, 52), None, None, (4651, 51), (4702, 42), None, (4744, 18), None, (4762, 15), (4777, 8), (4785, 21), (4806, 6), (4812, 16), (4828, 17)], [(4845, 9674), (14519, 10255), (24774, 10387), (35161, 9356), (44517, 9600), (54117, 9243), (63360, 10321), (73681, 9293), (82974, 10362), (93336, 9625), (102961, 10616), (113577, 9632), (123209, 10245), (133454, 11236), (144690, 9968), (154658, 10344), (165002, 10800), (175802, 10090), (185892, 9952), (195844, 9248), (205092, 10338), (215430, 9762), (225192, 10158), (235350, 10092), (245442, 10349), (255791, 9794), (265585, 10172), (275757, 10254), (286011, 9336), (295347, 9910), (305257, 10461), (315718, 9854), (325572, 9895), (335467, 9944), (345411, 9263), (354674, 10017), (364691, 9916), (374607, 10729), (385336, 10723), (396059, 10512), (406571, 10866), (417437, 9478), (426915, 9793), (436708, 9933), (446641, 9922), (456563, 10169), (466732, 9963), (476695, 11079), (487774, 9977), (497751, 9124), (506875, 9726), (516601, 10437), (527038, 10362), (537400, 9978), (547378, 10478), (557856, 9987), (567843, 10294), (578137, 10111), (588248, 10074), (598322, 8539), (606861, 9914), (616775, 10016), (626791, 9774), (636565, 10253), (646818, 10251), (657069, 10424), (667493, 9640), (677133, 10450), (687583, 10509), (698092, 10229), (708321, 9963), (718284, 9642), (727926, 9053), (736979, 10297), (747276, 9989), (757265, 10575), (767840, 9265), (777105, 10862), (787967, 9905), (797872, 9566), (807438, 10232), (817670, 9009), (826679, 9658), (836337, 10041), (846378, 9592), (855970, 10186), (866156, 10912), (877068, 9805), (886873, 10167), (897040, 10041), (907081, 10997), (918078, 9308), (927386, 9860), (937246, 9672), (946918, 9952), (956870, 10559), (967429, 10167), (977596, 9717), (987313, 10028), (997341, 9504), (1006845, 9701), (1016546, 10106), (1026652, 9792), (1036444, 9691), (1046135, 9728), (1055863, 10158), (1066021, 10526), (1076547, 10264), (1086811, 11082), (1097893, 10275), (1108168, 10404), (1118572, 10229), (1128801, 9635), (1138436, 9892), (1148328, 10279), (1158607, 10074), (1168681, 9904), (1178585, 10045), (1188630, 9821), (1198451, 10869), (1209320, 10543), (1219863, 10015), (1229878, 10099), (1239977, 10428), (1250405, 11126), (1261531, 9979), (1271510, 9512), (1281022, 10779), (1291801, 10086), (1301887, 11622), (1313509, 10852), (1324361, 9833), (1334194, 10029), (1344223, 9681), (1353904, 9732), (1363636, 10261), (1373897, 9504), (1383401, 10511), (1393912, 9554), (1403466, 9730), (1413196, 10554), (1423750, 10418), (1434168, 9544), (1443712, 9744), (1453456, 10585), (1464041, 9525), (1473566, 9941), (1483507, 9808), (1493315, 9575), (1502890, 10503), (1513393, 10183), (1523576, 10222), (1533798, 10241), (1544039, 9498), (1553537, 10018), (1563555, 10297), (1573852, 9842), (1583694, 10252), (1593946, 9628), (1603574, 9186), (1612760, 9171), (1621931, 10203), (1632134, 10585), (1642719, 9462), (1652181, 9951), (1662132, 11040), (1673172, 10089), (1683261, 9695), (1692956, 10674), (1703630, 9905), (1713535, 9318), (1722853, 9925), (1732778, 11514), (1744292, 9380), (1753672, 9457), (1763129, 10567), (1773696, 9936), (1783632, 10446), (1794078, 9749), (1803827, 9419), (1813246, 12350), (1825596, 10068), (1835664, 10041), (1845705, 10121), (1855826, 10854), (1866680, 11081), (1877761, 9343), (1887104, 10461), (1897565, 9965), (1907530, 9892), (1917422, 10835), (1928257, 9320), (1937577, 10065), (1947642, 9784), (1957426, 10055), (1967481, 9922), (1977403, 9843), (1987246, 9399), (1996645, 9891), (2006536, 9747), (2016283, 10312), (2026595, 9886), (2036481, 10895), (2047376, 9882), (2057258, 10597), (2067855, 10581), (2078436, 9299), (2087735, 10340), (2098075, 10200), (2108275, 10158), (2118433, 10422), (2128855, 10314), (2139169, 10244), (2149413, 9993), (2159406, 10469), (2169875, 9977), (2179852, 9513), (2189365, 10054), (2199419, 9745), (2209164, 10736), (2219900, 9716), (2229616, 9231), (2238847, 10839), (2249686, 10120), (2259806, 10165), (2269971, 9951), (2279922, 9971), (2289893, 9438), (2299331, 10322), (2309653, 10177), (2319830, 10808), (2330638, 9864), (2340502, 9510), (2350012, 10540), (2360552, 9944), (2370496, 10881), (2381377, 9701), (2391078, 9315), (2400393, 9001), (2409394, 10638), (2420032, 10272), (2430304, 10430), (2440734, 10139), (2450873, 10188), (2461061, 9672), (2470733, 10632), (2481365, 10212), (2491577, 9237), (2500814, 9949), (2510763, 9565), (2520328, 10094), (2530422, 10584), (2541006, 10482), (2551488, 9720), (2561208, 9887), (2571095, 10099)], [(2581194, 1136), (2582330, 931), (2583261, 933), (2584194, 1170), (2585364, 823), (2586187, 969), (2587156, 816), (2587972, 1175), (2589147, 861), (2590008, 942), (2590950, 698), (2591648, 756), (2592404, 1042), (2593446, 1095), (2594541, 1123), (2595664, 1226), (2596890, 1446), (2598336, 818), (2599154, 1086), (2600240, 960), (2601200, 1158), (2602358, 996), (2603354, 1173), (2604527, 979), (2605506, 1034), (2606540, 821), (2607361, 1274), (2608635, 1482), (2610117, 1026), (2611143, 1039), (2612182, 1189), (2613371, 1076), (2614447, 812), (2615259, 983), (2616242, 1196), (2617438, 1033), (2618471, 916), (2619387, 1060), (2620447, 1017), (2621464, 1270), (2622734, 951), (2623685, 1183), (2624868, 924), (2625792, 1013), (2626805, 973), (2627778, 734), (2628512, 1161), (2629673, 1239), (2630912, 936), (2631848, 651), (2632499, 1007), (2633506, 965), (2634471, 1060), (2635531, 1229), (2636760, 1591), (2638351, 781), (2639132, 911), (2640043, 918), (2640961, 821), (2641782, 981), (2642763, 994), (2643757, 1063), (2644820, 1286), (2646106, 1155), (2647261, 880), (2648141, 1041), (2649182, 913), (2650095, 658), (2650753, 863), (2651616, 1079), (2652695, 950), (2653645, 1082), (2654727, 793), (2655520, 977), (2656497, 854), (2657351, 963), (2658314, 843), (2659157, 910), (2660067, 945), (2661012, 719), (2661731, 1057), (2662788, 846), (2663634, 1177), (2664811, 814), (2665625, 994), (2666619, 809), (2667428, 963), (2668391, 1075), (2669466, 1054), (2670520, 1016), (2671536, 1218), (2672754, 1360), (2674114, 1192), (2675306, 934), (2676240, 1005), (2677245, 719), (2677964, 1126), (2679090, 985), (2680075, 845), (2680920, 867), (2681787, 1045), (2682832, 1124), (2683956, 1104), (2685060, 753), (2685813, 896), (2686709, 1040), (2687749, 707), (2688456, 691), (2689147, 1225), (2690372, 1231), (2691603, 998), (2692601, 952), (2693553, 942), (2694495, 1029), (2695524, 1060), (2696584, 978), (2697562, 854), (2698416, 818), (2699234, 913), (2700147, 848), (2700995, 1320), (2702315, 944), (2703259, 969), (2704228, 675), (2704903, 998), (2705901, 1046), (2706947, 957), (2707904, 1210), (2709114, 923), (2710037, 1262), (2711299, 1041), (2712340, 855), (2713195, 1097), (2714292, 906), (2715198, 1089), (2716287, 1049), (2717336, 951), (2718287, 919), (2719206, 990), (2720196, 816), (2721012, 906), (2721918, 935), (2722853, 958), (2723811, 760), (2724571, 793), (2725364, 720), (2726084, 866), (2726950, 820), (2727770, 942), (2728712, 850), (2729562, 943), (2730505, 825), (2731330, 740), (2732070, 1153), (2733223, 1013), (2734236, 929), (2735165, 954), (2736119, 1172), (2737291, 968), (2738259, 859), (2739118, 1259), (2740377, 928), (2741305, 944), (2742249, 1072), (2743321, 1287), (2744608, 875), (2745483, 847), (2746330, 912), (2747242, 908), (2748150, 883), (2749033, 1002), (2750035, 797), (2750832, 1212), (2752044, 952), (2752996, 1098), (2754094, 1148), (2755242, 919), (2756161, 809), (2756970, 975), (2757945, 952), (2758897, 2130), (2761027, 811), (2761838, 950), (2762788, 924), (2763712, 1251), (2764963, 890), (2765853, 957), (2766810, 872), (2767682, 785), (2768467, 1149), (2769616, 850), (2770466, 809), (2771275, 983), (2772258, 1087), (2773345, 1158), (2774503, 1035), (2775538, 930), (2776468, 848), (2777316, 1023), (2778339, 890), (2779229, 1023), (2780252, 882), (2781134, 1021), (2782155, 860), (2783015, 959), (2783974, 792), (2784766, 1028), (2785794, 1208), (2787002, 913), (2787915, 1187), (2789102, 961), (2790063, 998), (2791061, 1165), (2792226, 1310), (2793536, 1035), (2794571, 960), (2795531, 1163), (2796694, 885), (2797579, 810), (2798389, 612), (2799001, 950), (2799951, 1149), (2801100, 742), (2801842, 1276), (2803118, 775), (2803893, 954), (2804847, 1001), (2805848, 1112), (2806960, 1177), (2808137, 944), (2809081, 1121), (2810202, 806), (2811008, 1121), (2812129, 870), (2812999, 759), (2813758, 826), (2814584, 845), (2815429, 530), (2815959, 980), (2816939, 1220), (2818159, 1000), (2819159, 886), (2820045, 813), (2820858, 780), (2821638, 1087), (2822725, 792), (2823517, 802), (2824319, 1109), (2825428, 649), (2826077, 1137), (2827214, 2604), (2829818, 849), (2830667, 909), (2831576, 1152), (2832728, 1165), (2833893, 653)], [(2834546, 48), None, (2834594, 35), (2834629, 42), None, None, None, None, None, None, None, None, None, None, None, None, None, (2834671, 42), None, (2834713, 25), (2834738, 44), (2834782, 22), (2834804, 33), None, None, None, None, (2834837, 26), None, None, None, None, (2834863, 21), (2834884, 25), None, (2834909, 21), (2834930, 26), None, None, None, None, (2834956, 71), (2835027, 21), (2835048, 23), None, None, None, None, (2835071, 48), None, None, None, None, None, (2835119, 31), None, None, None, None, (2835150, 42), None, (2835192, 22), None, (2835214, 21), None, (2835235, 26), (2835261, 56), None, None, (2835317, 77), (2835394, 27), None, None, None, None, (2835421, 21), (2835442, 21), None, None, (2835463, 34), (2835497, 42), None, None, None, (2835539, 25), None, None, (2835564, 21), None, None, None, None, None, (2835585, 24), (2835609, 21), None, None, (2835630, 26), None, (2835656, 18), None, (2835674, 54), None, None, None, None, None, None, (2835728, 26), None, None, None, (2835754, 20), None, None, (2835774, 64), (2835838, 42), (2835880, 17), (2835897, 17), (2835914, 26), None, (2835940, 45), None, None, None, (2835985, 26), (2836011, 20), (2836031, 26), None, (2836057, 42), (2836099, 63), None, None, None, (2836162, 40), (2836202, 48), None, None, None, (2836250, 47), None, None, None, None, None, None, None, (2836297, 42), None, (2836339, 80), None, (2836419, 9), None, (2836428, 21), (2836449, 42), None, None, (2836491, 65), (2836556, 82), (2836638, 21), None, (2836659, 72), None, None, (2836731, 24), (2836755, 21), None, None, None, None, None, (2836776, 42), (2836818, 21), (2836839, 21), None, (2836860, 42), (2836902, 25), None, (2836927, 38), (2836965, 21), (2836986, 56), None, None, (2837042, 21), (2837063, 19), (2837082, 26), None, (2837108, 16), None, (2837124, 21), None, None, (2837145, 38), None, (2837183, 22), (2837205, 21), (2837226, 21), (2837247, 21), None, (2837268, 63), None, (2837331, 21), (2837352, 42), None, (2837394, 17), None, None, None, None, (2837411, 21), (2837432, 21), None, None, (2837453, 21), None, None, (2837474, 21), None, (2837495, 26), None, (2837521, 50), (2837571, 22), None, None, (2837593, 50), (2837643, 26), (2837669, 21), (2837690, 21), (2837711, 19), None, (2837730, 35), (2837765, 26), (2837791, 23), (2837814, 39), (2837853, 42), None, None, None, None, None, None, (2837895, 21), None, None, None, (2837916, 21), None, None, (2837937, 90), None, (2838027, 239), (2838266, 38), None, None, None, None]]  # noqa: E501
_CRC8_TABLE = [
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
    0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65,
    0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5,
    0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85,
    0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
    0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2,
    0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
    0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2,
    0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32,
    0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
    0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42,
    0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
    0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c,
    0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec,
    0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
    0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c,
    0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
    0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c,
    0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b,
    0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
    0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b,
    0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
    0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb,
    0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb,
    0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3
]
# fmt: on

_IS_LEAF = 0x80
_INCLUDE_SUBDOMAINS = 0x40


try:
    from importlib.resources import open_binary

    def open_pkg_binary(path: str) -> typing.BinaryIO:
        return open_binary("hstspreload", path)


except ImportError:

    def open_pkg_binary(path: str) -> typing.BinaryIO:
        return open(
            os.path.join(os.path.dirname(os.path.abspath(__file__)), path),
            "rb",
        )


@functools.lru_cache(maxsize=1024)
def in_hsts_preload(host: typing.AnyStr) -> bool:
    """Determines if an IDNA-encoded host is on the HSTS preload list"""

    if isinstance(host, str):
        host = host.encode("ascii")
    labels = host.lower().split(b".")

    # Fast-branch for gTLDs that are registered to preload all sub-domains.
    if labels[-1] in _GTLD_INCLUDE_SUBDOMAINS:
        return True

    with open_pkg_binary("hstspreload.bin") as f:
        for layer, label in enumerate(labels[::-1]):
            # None of our layers are greater than 4 deep.
            if layer > 3:
                return False

            # Read the jump table for the layer and label
            jump_info = _JUMPTABLE[layer][_crc8(label)]
            if jump_info is None:
                # No entry: host is not preloaded
                return False

            # Read the set of entries for that layer and label
            f.seek(jump_info[0])
            data = bytearray(jump_info[1])
            f.readinto(data)

            for is_leaf, include_subdomains, ent_label in _iter_entries(data):
                # We found a potential leaf
                if is_leaf:
                    if ent_label == host:
                        return True
                    if include_subdomains and host.endswith(b"." + ent_label):
                        return True

                # Continue traversing as we're not at a leaf.
                elif label == ent_label:
                    break
            else:
                return False
    return False


def _iter_entries(data: bytes) -> typing.Iterable[typing.Tuple[int, int, bytes]]:
    while data:
        flags = data[0]
        size = data[1]
        label = bytes(data[2 : 2 + size])
        yield (flags & _IS_LEAF, flags & _INCLUDE_SUBDOMAINS, label)
        data = data[2 + size :]


def _crc8(value: bytes) -> int:
    # CRC8 reference implementation: https://github.com/niccokunzmann/crc8
    checksum = 0x00
    for byte in value:
        checksum = _CRC8_TABLE[checksum ^ byte]
    return checksum
